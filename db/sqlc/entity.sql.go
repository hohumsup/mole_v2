// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: entity.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createEntity = `-- name: CreateEntity :one
WITH new_entity AS (
  INSERT INTO entity (name, description)
  VALUES ($1, $2)
  RETURNING entity_id, name, description
),
new_provenance AS (
  INSERT INTO provenance (entity_id, data_type, source_name, integration_source, source_update_time)
  SELECT entity_id, $3, $4, $5, now()
  FROM new_entity
  RETURNING entity_id, integration_source
)
SELECT e.entity_id, e.name, e.description, p.integration_source
FROM new_entity e
JOIN new_provenance p ON e.entity_id = p.entity_id
`

type CreateEntityParams struct {
	Name              string         `json:"name"`
	Description       string         `json:"description"`
	DataType          sql.NullString `json:"data_type"`
	SourceName        sql.NullString `json:"source_name"`
	IntegrationSource string         `json:"integration_source"`
}

type CreateEntityRow struct {
	EntityID          uuid.UUID `json:"entity_id"`
	Name              string    `json:"name"`
	Description       string    `json:"description"`
	IntegrationSource string    `json:"integration_source"`
}

func (q *Queries) CreateEntity(ctx context.Context, arg CreateEntityParams) (CreateEntityRow, error) {
	row := q.db.QueryRowContext(ctx, createEntity,
		arg.Name,
		arg.Description,
		arg.DataType,
		arg.SourceName,
		arg.IntegrationSource,
	)
	var i CreateEntityRow
	err := row.Scan(
		&i.EntityID,
		&i.Name,
		&i.Description,
		&i.IntegrationSource,
	)
	return i, err
}

const createEntityWithPosition = `-- name: CreateEntityWithPosition :one
WITH entity_inserted AS (
  -- Insert the entity if it doesn't already exist
  INSERT INTO entity (entity_id, name, description)
  VALUES (uuid_generate_v4(), $1, $2)
  ON CONFLICT (name) DO NOTHING -- Entity exists
  RETURNING entity_id
),
entity_selected AS (
  -- Retrieve the entity_id, whether newly inserted or already existing
  SELECT entity_id
  FROM entity
  WHERE name = $1
),
location_inserted AS (
  -- Insert the location for the entity
  INSERT INTO location (entity_id, created_at, modified_at)
  SELECT entity_id, now(), now()
  FROM entity_selected
  RETURNING id AS location_id
),
position_inserted AS (
  -- Insert the position data for the location
  INSERT INTO position (location_id, latitude_degrees, longitude_degrees, heading_degrees, altitude_hae_meters, speed_mps)
  SELECT location_id, $3, $4, $5, $6, $7
  FROM location_inserted
  RETURNING id AS position_id
)
SELECT
  es.entity_id,
  li.location_id,
  pi.position_id
FROM entity_selected es
LEFT JOIN location_inserted li ON TRUE
LEFT JOIN position_inserted pi ON TRUE
`

type CreateEntityWithPositionParams struct {
	Name              string          `json:"name"`
	Description       string          `json:"description"`
	LatitudeDegrees   float64         `json:"latitude_degrees"`
	LongitudeDegrees  float64         `json:"longitude_degrees"`
	HeadingDegrees    sql.NullFloat64 `json:"heading_degrees"`
	AltitudeHaeMeters sql.NullFloat64 `json:"altitude_hae_meters"`
	SpeedMps          sql.NullFloat64 `json:"speed_mps"`
}

type CreateEntityWithPositionRow struct {
	EntityID   uuid.UUID     `json:"entity_id"`
	LocationID sql.NullInt64 `json:"location_id"`
	PositionID sql.NullInt64 `json:"position_id"`
}

// Return the IDs of the created/selected entity, location, and position
func (q *Queries) CreateEntityWithPosition(ctx context.Context, arg CreateEntityWithPositionParams) (CreateEntityWithPositionRow, error) {
	row := q.db.QueryRowContext(ctx, createEntityWithPosition,
		arg.Name,
		arg.Description,
		arg.LatitudeDegrees,
		arg.LongitudeDegrees,
		arg.HeadingDegrees,
		arg.AltitudeHaeMeters,
		arg.SpeedMps,
	)
	var i CreateEntityWithPositionRow
	err := row.Scan(&i.EntityID, &i.LocationID, &i.PositionID)
	return i, err
}

const deleteEntity = `-- name: DeleteEntity :exec
DELETE FROM entity
WHERE entity_id = $1
`

func (q *Queries) DeleteEntity(ctx context.Context, entityID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteEntity, entityID)
	return err
}

const getEntitiesByNames = `-- name: GetEntitiesByNames :many
SELECT e.entity_id, e.name, e.description, p.integration_source
FROM entity e
JOIN provenance p on e.entity_id = p.entity_id
WHERE name = ANY($1::text[])
`

type GetEntitiesByNamesRow struct {
	EntityID          uuid.UUID `json:"entity_id"`
	Name              string    `json:"name"`
	Description       string    `json:"description"`
	IntegrationSource string    `json:"integration_source"`
}

func (q *Queries) GetEntitiesByNames(ctx context.Context, dollar_1 []string) ([]GetEntitiesByNamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getEntitiesByNames, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntitiesByNamesRow{}
	for rows.Next() {
		var i GetEntitiesByNamesRow
		if err := rows.Scan(
			&i.EntityID,
			&i.Name,
			&i.Description,
			&i.IntegrationSource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEntity = `-- name: GetEntity :one
SELECT entity_id, name, description FROM entity
WHERE entity_id = $1
`

func (q *Queries) GetEntity(ctx context.Context, entityID uuid.UUID) (Entity, error) {
	row := q.db.QueryRowContext(ctx, getEntity, entityID)
	var i Entity
	err := row.Scan(&i.EntityID, &i.Name, &i.Description)
	return i, err
}

const getEntityByNameAndIntegrationSource = `-- name: GetEntityByNameAndIntegrationSource :one
SELECT 
    e.entity_id, 
    e.name, 
    e.description, 
    p.integration_source
FROM entity e
JOIN provenance p ON e.entity_id = p.entity_id
WHERE e.name = $1 AND p.integration_source = $2
LIMIT 1
`

type GetEntityByNameAndIntegrationSourceParams struct {
	Name              string `json:"name"`
	IntegrationSource string `json:"integration_source"`
}

type GetEntityByNameAndIntegrationSourceRow struct {
	EntityID          uuid.UUID `json:"entity_id"`
	Name              string    `json:"name"`
	Description       string    `json:"description"`
	IntegrationSource string    `json:"integration_source"`
}

func (q *Queries) GetEntityByNameAndIntegrationSource(ctx context.Context, arg GetEntityByNameAndIntegrationSourceParams) (GetEntityByNameAndIntegrationSourceRow, error) {
	row := q.db.QueryRowContext(ctx, getEntityByNameAndIntegrationSource, arg.Name, arg.IntegrationSource)
	var i GetEntityByNameAndIntegrationSourceRow
	err := row.Scan(
		&i.EntityID,
		&i.Name,
		&i.Description,
		&i.IntegrationSource,
	)
	return i, err
}

const getEntityByNames = `-- name: GetEntityByNames :many
SELECT e.entity_id, e.name, e.description, p.integration_source
FROM entity e
JOIN provenance p on e.entity_id = p.entity_id
where e.name = $1
`

type GetEntityByNamesRow struct {
	EntityID          uuid.UUID `json:"entity_id"`
	Name              string    `json:"name"`
	Description       string    `json:"description"`
	IntegrationSource string    `json:"integration_source"`
}

func (q *Queries) GetEntityByNames(ctx context.Context, name string) ([]GetEntityByNamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getEntityByNames, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetEntityByNamesRow{}
	for rows.Next() {
		var i GetEntityByNamesRow
		if err := rows.Scan(
			&i.EntityID,
			&i.Name,
			&i.Description,
			&i.IntegrationSource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntities = `-- name: ListEntities :many
SELECT e.entity_id, e.name, e.description, p.integration_source
FROM entity e
JOIN provenance p on e.entity_id = p.entity_id
ORDER BY e.entity_id
LIMIT $1 OFFSET $2
`

type ListEntitiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListEntitiesRow struct {
	EntityID          uuid.UUID `json:"entity_id"`
	Name              string    `json:"name"`
	Description       string    `json:"description"`
	IntegrationSource string    `json:"integration_source"`
}

func (q *Queries) ListEntities(ctx context.Context, arg ListEntitiesParams) ([]ListEntitiesRow, error) {
	rows, err := q.db.QueryContext(ctx, listEntities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEntitiesRow{}
	for rows.Next() {
		var i ListEntitiesRow
		if err := rows.Scan(
			&i.EntityID,
			&i.Name,
			&i.Description,
			&i.IntegrationSource,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntityByName = `-- name: UpdateEntityByName :one
UPDATE entity
SET
  name = $2,
  description = $3
WHERE name = $1
RETURNING entity_id, name, description
`

type UpdateEntityByNameParams struct {
	Name        string `json:"name"`
	Name_2      string `json:"name_2"`
	Description string `json:"description"`
}

func (q *Queries) UpdateEntityByName(ctx context.Context, arg UpdateEntityByNameParams) (Entity, error) {
	row := q.db.QueryRowContext(ctx, updateEntityByName, arg.Name, arg.Name_2, arg.Description)
	var i Entity
	err := row.Scan(&i.EntityID, &i.Name, &i.Description)
	return i, err
}

const updateEntityIntegrationSourceByNameAndSource = `-- name: UpdateEntityIntegrationSourceByNameAndSource :one
UPDATE provenance
SET integration_source = $3
WHERE entity_id = (
  SELECT entity_id FROM entity WHERE name = $1
)
AND integration_source = $2
RETURNING entity_id, integration_source
`

type UpdateEntityIntegrationSourceByNameAndSourceParams struct {
	Name                string `json:"name"`
	IntegrationSource   string `json:"integration_source"`
	IntegrationSource_2 string `json:"integration_source_2"`
}

type UpdateEntityIntegrationSourceByNameAndSourceRow struct {
	EntityID          uuid.UUID `json:"entity_id"`
	IntegrationSource string    `json:"integration_source"`
}

func (q *Queries) UpdateEntityIntegrationSourceByNameAndSource(ctx context.Context, arg UpdateEntityIntegrationSourceByNameAndSourceParams) (UpdateEntityIntegrationSourceByNameAndSourceRow, error) {
	row := q.db.QueryRowContext(ctx, updateEntityIntegrationSourceByNameAndSource, arg.Name, arg.IntegrationSource, arg.IntegrationSource_2)
	var i UpdateEntityIntegrationSourceByNameAndSourceRow
	err := row.Scan(&i.EntityID, &i.IntegrationSource)
	return i, err
}
