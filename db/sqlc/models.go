// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"time"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Context struct {
	// Unique ID for the context record
	ContextID int64 `json:"context_id"`
	// Reference to the associated entity
	EntityID uuid.UUID `json:"entity_id"`
	// Template type for the context record
	Template int32 `json:"template"`
	// High-level classification (e.g., 'detection', 'uav')
	EntityType pgtype.Text `json:"entity_type"`
	// A detailed categorization (e.g., 'radar', 'fixed-wing')
	SpecificType pgtype.Text `json:"specific_type"`
	// Timestamp for when the context record was created
	CreatedAt time.Time `json:"created_at"`
}

// Represents any identifiable object or concept within a test environment. Entities may be physical or non-physical, including:
//   - Physical objects, such as autonomous vehicles, sensors, or infrastructure
//   - Non-physical events, such as camera detections, algorithmic classifications, or test executions
//   - Conceptual areas, such as regions of interest, operation zones, or mission boundaries.
type Entity struct {
	// Unique identifier for the entity.
	EntityID uuid.UUID `json:"entity_id"`
	// Human-readable name representing the entity.
	Name string `json:"name"`
	// Descriptive information providing context about the entity.
	Description string `json:"description"`
}

type GeoDetail struct {
	// Reference to the associated instance.
	InstanceID        uuid.UUID `json:"instance_id"`
	InstanceCreatedAt time.Time `json:"instance_created_at"`
	// Geospatial point representation of the entity.
	GeoPoint interface{} `json:"geo_point"`
	// Geospatial line representation of the entity.
	GeoLine interface{} `json:"geo_line"`
	// Geospatial polygon representation of the entity.
	GeoPolygon interface{} `json:"geo_polygon"`
	// Geospatial ellipse representation of the entity.
	GeoEllipse interface{} `json:"geo_ellipse"`
	// Geospatial ellipsoid representation of the entity.
	GeoEllipsoid interface{} `json:"geo_ellipsoid"`
}

// Represents a specific event or occurrence associated with an entity within the Common Operational Picture (COP).
//
//	Instances capture real-time or recorded data, including asset state, sensor readings, and relevant experimental details.
//	This table serves as the core unit for situational awareness and data evaluation.
type Instance struct {
	// Unique identifier for the instance record.
	InstanceID uuid.UUID `json:"instance_id"`
	// Reference to the associated entity.
	EntityID uuid.UUID `json:"entity_id"`
	// Identifier of the system or entity that generated this instance.
	ProducedBy pgtype.Text `json:"produced_by"`
	// Timestamp (provided by the client) indicating when the instance data was recorded.
	CreatedAt time.Time `json:"created_at"`
	// Timestamp (generated by the server) marking the last modification of the instance record.
	ModifiedAt time.Time `json:"modified_at"`
	// A JSON object containing additional structured or unstructured metadata relevant to the instance.
	Metadata []byte `json:"metadata"`
}

type Position struct {
	// Reference to the associated instance.
	InstanceID        uuid.UUID `json:"instance_id"`
	InstanceCreatedAt time.Time `json:"instance_created_at"`
	// WGS84 geodetic latitude in decimal degrees.
	LatitudeDegrees float64 `json:"latitude_degrees"`
	// WGS84 longitude in decimal degrees.
	LongitudeDegrees float64 `json:"longitude_degrees"`
	// Heading in degrees.
	HeadingDegrees pgtype.Float8 `json:"heading_degrees"`
	// Altitude as height above ellipsoid (WGS84), in meters.
	AltitudeHaeMeters pgtype.Float8 `json:"altitude_hae_meters"`
	// Speed as the magnitude of velocity, in meters per second.
	SpeedMps pgtype.Float8 `json:"speed_mps"`
}

type Provenance struct {
	// Unique ID for the provenance record
	ProvenanceID int64 `json:"provenance_id"`
	// Reference to the entity associated with this provenance record
	EntityID uuid.UUID `json:"entity_id"`
	// Optional name or identifier for the source system (e.g., 'gps', 'telemetry')
	DataType pgtype.Text `json:"data_type"`
	// Integration source used for which system provided the data (e.g., 'TAK')
	IntegrationSource string `json:"integration_source"`
	// Last modification time according to the source system
	SourceUpdateTime time.Time `json:"source_update_time"`
	// Timestamp for when the provenance record was created
	CreatedAt time.Time `json:"created_at"`
}

type Template struct {
	TemplateID int32  `json:"template_id"`
	Name       string `json:"name"`
}
